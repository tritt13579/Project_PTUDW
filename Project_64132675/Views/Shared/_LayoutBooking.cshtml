<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Metropole Booking</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="~/Content/StyleBooking.css"s rel="stylesheet" />
</head>
<body>
    <button id="menuToggle">
        <i class="fas fa-bars"></i>
    </button>
    <div class="overlay"></div>
    <!-- Side Navigation -->
    <div class="side-nav bg-light shadow-lg p-3">
        <button class="btn btn-outline-secondary side-nav-close">
            <i class="fas fa-times"></i>
        </button>
        <div class="side-nav-header text-center my-3">
            <a href="@Url.Action("Index", "Home_64132675" )">
                <img src="~/Public/Images/logo_black.png" alt="Metropole Logo" class="img-fluid" style="max-width: 150px;">
            </a>
        </div>
        <div class="side-nav-content">
            <ul class="list-group side-nav-menu">
                <li class="list-group-item m-1">
                    <a class="text-decoration-none d-flex align-items-center" href="@Url.Action("Index", "Home_64132675" )">
                        <i class="fas fa-home me-2"></i> TRANG CHỦ
                    </a>
                </li>
                <li class="list-group-item m-1">
                    <a class="text-decoration-none d-flex align-items-center" href="@Url.Action("Booking", "Booking_64132675" )">
                        <i class="fas fa-calendar-check me-2"></i> ĐẶT PHÒNG NGAY
                    </a>
                </li>
                <li class="list-group-item m-1">
                    <a class="text-decoration-none d-flex align-items-center" href="@Url.Action("MyBookings", "Booking_64132675" )">
                        <i class="fas fa-bed me-2"></i> ĐẶT PHÒNG CỦA TÔI
                    </a>
                </li>
                <li class="list-group-item m-1">
                    <a class="text-decoration-none d-flex align-items-center text-danger" href="@Url.Action("Logout", "Auth_64132675", new { area = "" })">
                        <i class="fas fa-sign-out-alt me-2"></i> ĐĂNG XUẤT
                    </a>
                </li>
            </ul>
        </div>
    </div>

    @RenderBody()

    <footer class="footer bg-dark text-light py-5">
        <div class="container">
            <div class="row">
                <!-- About Us Section -->
                <div class="col-12 col-md-4 mb-4 mb-md-3">
                    <h5 class="text-uppercase mb-3 text-center text-warning">About Us</h5>
                    <p class="">
                        At Hotel Metropole, we strive to provide our guests with an unforgettable experience, offering luxurious rooms and top-notch services. Book your stay with us and enjoy comfort at its finest.
                    </p>
                </div>
                <!-- Quick Links Section -->
                <div class="col-6 col-md-4 d-flex flex-column align-items-center mb-4">
                    <h5 class="text-uppercase mb-3 text-center text-warning">Quick Links</h5>
                    <ul class="list-unstyled text-start ms-3">
                        <li><a href="#rooms" class="text-light text-decoration-none link-hover">Rooms</a></li>
                        <li><a href="#booking" class="text-light text-decoration-none link-hover">Book Now</a></li>
                        <li><a href="#amenities" class="text-light text-decoration-none link-hover">Amenities</a></li>
                        <li><a href="#contact" class="text-light text-decoration-none link-hover">Contact Us</a></li>
                        <li><a href="#" class="text-light text-decoration-none link-hover">Privacy Policy</a></li>
                        <li><a href="#" class="text-light text-decoration-none link-hover">Terms of Service</a></li>
                    </ul>
                </div>
                <!-- Follow Us Section -->
                <div class="col-6 col-md-4 d-flex flex-column align-items-center">
                    <h5 class="text-uppercase mb-3 text-center text-warning">Follow Us</h5>
                    <ul class="list-unstyled text-start">
                        <li><a href="#" class="text-light text-decoration-none link-hover"><i class="fab fa-facebook-f me-2"></i>Facebook</a></li>
                        <li><a href="#" class="text-light text-decoration-none link-hover"><i class="fab fa-twitter me-2"></i>Twitter</a></li>
                        <li><a href="#" class="text-light text-decoration-none link-hover"><i class="fab fa-instagram me-2"></i>Instagram</a></li>
                        <li><a href="#" class="text-light text-decoration-none link-hover"><i class="fab fa-youtube me-2"></i>YouTube</a></li>
                    </ul>
                </div>
            </div>
            <hr class="my-4 border-light" />
            <div class="text-center">
                <p class="mb-0">&copy; 2024 Hotel Metropole. All Rights Reserved.</p>
                <p class="mb-0">Designed by TriTran</p>
            </div>
        </div>
    </footer>

    @Scripts.Render("~/bundles/jquery")
    @*<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3-alpha1/dist/js/bootstrap.bundle.min.js"></script>*@
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.8/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        $(document).ready(function () {
            $('#menuToggle').click(function () {
                $('.side-nav').addClass('active');
                $('.overlay').addClass('active');
                $('body').css('overflow', 'hidden');
            });

            $('.side-nav-close, .overlay').click(function () {
                $('.side-nav').removeClass('active');
                $('.overlay').removeClass('active');
                $('body').css('overflow', '');
            });
        });
    </script>
    @RenderSection("scripts", required: false)

    <script>
        // Khởi tạo mảng để lưu phòng và dịch vụ được chọn
        let selectedRooms = [];
        let selectedServices = [];
        let currentBookingState = {
            checkIn: new Date(),
            checkOut: new Date().fp_incr(1),
            adults: 2,
            children: 0
        };
        // Xử lý chọn phòng
        document.addEventListener('DOMContentLoaded', function () {
            let guestState = {
                adults: 2,
                children: 0
            };

            const limits = {
                adults: { min: 1, max: 100 },
                children: { min: 0, max: 100 }
            };

            const fp = flatpickr("#dateRange", {
                mode: "range",
                dateFormat: "D, j M Y",
                minDate: "today",
                showMonths: 2,
                defaultDate: [new Date(), new Date().fp_incr(1)],
                disableMobile: true,

                onChange: function (selectedDates, dateStr, instance) {
                    updateDisplay(selectedDates);
                },

                onReady: function (selectedDates, dateStr, instance) {
                    if (selectedDates.length === 2) {
                        updateBookingSummary(
                            selectedDates[0].toISOString(),
                            selectedDates[1].toISOString(),
                            guestState.adults,
                            guestState.children
                        );
                    }
                },
                onClose: function (selectedDates, dateStr, instance) {
                    if (selectedDates.length === 2) {
                        const formattedDates = selectedDates.map(date =>
                            date.toLocaleDateString('en-GB', {
                                weekday: 'short',
                                day: 'numeric',
                                month: 'short',
                                year: 'numeric'
                            })
                        ).join(' → ');

                        instance.input.value = formattedDates;

                        // Reset all selections
                        selectedRooms = [];
                        selectedServices = [];

                        const roomClassSelect = document.getElementById('roomClass');
                        const selectedRoomClass = roomClassSelect.value;

                        // Update available rooms first
                        updateAvailableRooms(selectedDates[0], selectedDates[1], selectedRoomClass);

                        // Update booking summary
                        updateBookingSummary(
                            selectedDates[0].toISOString(),
                            selectedDates[1].toISOString(),
                            currentBookingState.adults,
                            currentBookingState.children
                        );
                    }
                }
            });

            const initialDates = fp.selectedDates;
            if (initialDates.length === 2) {
                updateBookingSummary(
                    initialDates[0].toISOString(),
                    initialDates[1].toISOString(),
                    guestState.adults,
                    guestState.children
                );
            }

            document.getElementById('roomClass').addEventListener('change', function () {
                const selectedDates = fp.selectedDates;
                if (selectedDates.length === 2) {
                    updateAvailableRooms(selectedDates[0], selectedDates[1], this.value);
                }
            });

            function updateDisplay(selectedDates) {
                const checkInInput = document.getElementById('checkIn');
                const checkOutInput = document.getElementById('checkOut');
                const nightsInput = document.getElementById('nights');

                if (selectedDates.length === 2) {
                    const nights = Math.round((selectedDates[1] - selectedDates[0]) / (1000 * 60 * 60 * 24));

                    checkInInput.value = selectedDates[0].toISOString().split('T')[0];
                    checkOutInput.value = selectedDates[1].toISOString().split('T')[0];
                    nightsInput.value = nights;
                }
            }

             function updateAvailableRooms(checkIn, checkOut, roomClassId) {
                const bookingContent = document.getElementById('booking-content');
                if (bookingContent) {
                    bookingContent.style.opacity = '0.5';
                }

                 const formattedCheckIn = checkIn.toISOString();
                 const formattedCheckOut = checkOut.toISOString();

                $.ajax({
                    url: '@Url.Action("UpdateAvailableRooms", "Booking_64132675")',
                    type: 'POST',
                    data: JSON.stringify({
                        checkin: formattedCheckIn,
                        checkout: formattedCheckOut,
                        roomClassId: roomClassId
                    }),
                    contentType: 'application/json',
                    success: function(result) {
                        $('#booking-content').html(result);
                        if (bookingContent) {
                            bookingContent.style.opacity = '1';
                        }
                        // Gọi hàm khởi tạo lại các components
                        initializeBookingComponents();
                        restoreServiceSelections();
                    },
                    error: function(xhr, status, error) {
                        if (bookingContent) {
                            bookingContent.style.opacity = '1';
                        }
                    }
                });
            }
            function restoreServiceSelections() {
                selectedServices.forEach(serviceId => {
                    const serviceButton = document.querySelector(`[data-service="${serviceId}"]`);
                    if (serviceButton) {
                        serviceButton.classList.add('btn-danger');
                        serviceButton.classList.remove('btn-primary');
                        serviceButton.textContent = 'Xóa';
                    }
                });
            }

            function initializeBookingComponents() {
                // Khởi tạo lại các nút chọn phòng
                document.querySelectorAll('.select-room').forEach(button => {
                    const newButton = button.cloneNode(true);
                    button.parentNode.replaceChild(newButton, button);
                    newButton.addEventListener('click', handleRoomSelection);
                });

                initializeQuantitySelectors();

                if (typeof initializeRoomCounters === 'function') {
                    initializeRoomCounters();
                }

                // Khởi tạo lại các nút dịch vụ
                initializeServiceButtons();


            }

            function handleRoomSelection(e) {
                e.preventDefault();
                const roomNumbers = this.getAttribute('data-roomnumbers');
                const existingRoomIndex = selectedRooms.findIndex(r => r.RoomNumbers === roomNumbers);

                if (existingRoomIndex === -1) {
                    const roomClassId = this.getAttribute('data-roomclass');
                    const price = parseFloat(this.getAttribute('data-price'));
                    const name = this.getAttribute('data-name');

                    const container = this.closest('.room-item') || this.parentElement;
                    const quantitySelector = container.querySelector('.room-quantity');
                    const quantity = quantitySelector ? parseInt(quantitySelector.value) : 1;

                    const roomNumberArray = roomNumbers.split(',').map(n => n.trim());
                    const selectedRoomNumbers = roomNumberArray.slice(0, quantity);

                    selectedRooms.push({
                        RoomClassId: roomClassId,
                        RoomNumbers: roomNumbers,
                        RoomNumber: selectedRoomNumbers.join(', '),
                        Price: price,
                        Quantity: quantity,
                        Name: name
                    });

                    this.textContent = 'Hủy phòng này';
                    this.classList.remove('btn-primary');
                    this.classList.add('btn-danger');

                    if (quantitySelector) {
                        quantitySelector.disabled = true;
                    }
                } else {
                    selectedRooms.splice(existingRoomIndex, 1);
                    this.textContent = 'Chọn phòng này';
                    this.classList.remove('btn-danger');
                    this.classList.add('btn-primary');

                    const container = this.closest('.room-item') || this.parentElement;
                    const quantitySelector = container.querySelector('.room-quantity');
                    if (quantitySelector) {
                        quantitySelector.disabled = false;
                    }
                }

                UpdateBookingSummaryWithRoomsAndServices();
            }

            function handleQuantityChange() {
                // Tìm container là div.booking-actions thay vì room-item
                const container = this.closest('.booking-actions');
                const button = container.querySelector('.select-room');
                const roomNumbers = button.getAttribute('data-roomnumbers');
            
                const existingRoomIndex = selectedRooms.findIndex(r => r.RoomNumbers === roomNumbers);
                if (existingRoomIndex !== -1) {
                    const quantity = parseInt(this.value);
                    const roomNumberArray = roomNumbers.split(',').map(n => n.trim());
                    const selectedRoomNumbers = roomNumberArray.slice(0, quantity);

                    selectedRooms[existingRoomIndex].Quantity = quantity;
                    selectedRooms[existingRoomIndex].RoomNumber = selectedRoomNumbers.join(', ');

                    UpdateBookingSummaryWithRoomsAndServices();
                }
            }

            function initializeQuantitySelectors() {
                document.querySelectorAll('.room-quantity').forEach(selector => {
                    // Xóa event listener cũ bằng cách clone và thay thế
                    const newSelector = selector.cloneNode(true);
                    selector.parentNode.replaceChild(newSelector, selector);

                    newSelector.addEventListener('change', handleQuantityChange);
                });
            }

            function handleServiceSelection(e) {
                e.preventDefault();
                e.stopPropagation();

                const serviceId = parseInt(this.getAttribute('data-service'));

                if (!selectedServices) {
                    selectedServices = [];
                }

                const serviceIndex = selectedServices.indexOf(serviceId);
                if (serviceIndex === -1) {
                    selectedServices.push(serviceId);
                    this.classList.add('btn-danger');
                    this.classList.remove('btn-primary');
                    this.textContent = 'Xóa';
                } else {
                    selectedServices.splice(serviceIndex, 1);
                    this.classList.remove('btn-danger');
                    this.classList.add('btn-primary');
                    this.textContent = 'Thêm';
                }

                UpdateBookingSummaryWithRoomsAndServices();
            }

            function initializeServiceButtons() {

                document.querySelectorAll('[data-service]').forEach(button => {
                    // Remove all existing event listeners
                    const newButton = button.cloneNode(true);
                    button.parentNode.replaceChild(newButton, button);

                    // Add new event listener
                    newButton.addEventListener('click', handleServiceSelection);

                    // Reset button state
                    const serviceId = parseInt(newButton.getAttribute('data-service'));
                    if (selectedServices && selectedServices.includes(serviceId)) {
                        newButton.classList.add('btn-danger');
                        newButton.classList.remove('btn-primary');
                        newButton.textContent = 'Xóa';
                    } else {
                        newButton.classList.remove('btn-danger');
                        newButton.classList.add('btn-primary');
                        newButton.textContent = 'Thêm';
                    }
                });
            }

            // Initialize dropdown toggle
            const roomGuestsInput = document.getElementById('roomGuests');
            const guestDropdown = document.getElementById('guestDropdown');

            roomGuestsInput.addEventListener('click', function (e) {
                e.preventDefault();
                e.stopPropagation();
                if (!guestDropdown.classList.contains('show')) {
                    guestDropdown.classList.add('show');
                }
            });

            // Close dropdown when clicking outside
            document.addEventListener('click', function (e) {
                if (!e.target.closest('.guest-dropdown') && !e.target.closest('.input-group') && guestDropdown.classList.contains('show')) {
                    guestDropdown.classList.remove('show');
                }
            });

            // Handle guest count updates
            document.querySelectorAll('.guest-btn').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    const type = this.dataset.type;
                    const action = this.dataset.action;
                    updateGuestCount(type, action === 'increase' ? 1 : -1);
                });
            });

            function updateGuestCount(type, change) {
                const newCount = guestState[type] + change;
                const limit = limits[type];

                if (newCount >= limit.min && newCount <= limit.max) {
                    guestState[type] = newCount;
                    document.getElementById(`${type}Count`).textContent = newCount;
                    document.getElementById(`${type}Input`).value = newCount;
                    updateDisplayText();

                    const selectedDates = fp.selectedDates;
                    if (selectedDates.length === 2) {
                        updateBookingSummary(
                            selectedDates[0].toISOString(),
                            selectedDates[1].toISOString(),
                            guestState.adults,
                            guestState.children
                        );
                    }
                }
            }

            function updateDisplayText() {
                const total = guestState.adults + guestState.children;
                roomGuestsInput.value = `${total} Guest${total > 1 ? 's' : ''}`;
            }

            // Initialize display
            updateDisplayText();

            // Handle Done button
            document.getElementById('applyGuests').addEventListener('click', function (e) {
                e.preventDefault();
                guestDropdown.classList.remove('show');

                updateBookingSummary(
                    currentBookingState.checkIn.toISOString(),
                    currentBookingState.checkOut.toISOString(),
                    guestState.adults,
                    guestState.children
                );
            });

            const tabs = document.querySelectorAll('#bookingTabs button');
            tabs.forEach(tab => {
                tab.addEventListener('click', function (e) {
                    e.preventDefault();
                    updateActiveTab(this);
                });
            });

            function updateActiveTab(selectedTab) {
                // Remove active class from all tabs
                tabs.forEach(tab => {
                    tab.classList.remove('active');
                    const pane = document.querySelector(tab.dataset.bsTarget);
                    pane.classList.remove('show', 'active');
                });

                // Add active class to selected tab
                selectedTab.classList.add('active');
                const targetPane = document.querySelector(selectedTab.dataset.bsTarget);
                targetPane.classList.add('show', 'active');
            }

            document.querySelectorAll('.select-room').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    const roomNumbers = this.getAttribute('data-roomnumbers');

                    // Kiểm tra xem phòng đã được chọn chưa bằng roomNumbers
                    const existingRoomIndex = selectedRooms.findIndex(r => r.RoomNumbers === roomNumbers);

                    if (existingRoomIndex === -1) {
                        // Chưa chọn phòng - thêm phòng mới
                        const roomClassId = this.getAttribute('data-roomclass');
                        const price = parseFloat(this.getAttribute('data-price'));
                        const name = this.getAttribute('data-name');

                        // Tìm quantity selector
                        const container = this.closest('.room-item') || this.parentElement;
                        const quantitySelector = container.querySelector('.room-quantity');
                        const quantity = quantitySelector ? parseInt(quantitySelector.value) : 1;

                        // Split roomNumbers thành mảng và lấy số lượng phòng theo quantity
                        const roomNumberArray = roomNumbers.split(',').map(n => n.trim());
                        const selectedRoomNumbers = roomNumberArray.slice(0, quantity);

                        // Thêm phòng mới vào mảng
                        selectedRooms.push({
                            RoomClassId: roomClassId,
                            RoomNumbers: roomNumbers,
                            RoomNumber: selectedRoomNumbers.join(', '),
                            Price: price,
                            Quantity: quantity,
                            Name: name
                        });

                        // Đổi text và style của nút
                        this.textContent = 'Hủy phòng này';
                        this.classList.remove('btn-primary');
                        this.classList.add('btn-danger');

                        // Disable quantity selector sau khi chọn
                        if (quantitySelector) {
                            quantitySelector.disabled = true;
                        }
                    } else {
                        // Đã chọn phòng - hủy phòng
                        selectedRooms.splice(existingRoomIndex, 1);

                        // Đổi text và style của nút về trạng thái ban đầu
                        this.textContent = 'Chọn phòng này';
                        this.classList.remove('btn-danger');
                        this.classList.add('btn-primary');

                        // Enable lại quantity selector
                        const container = this.closest('.room-item') || this.parentElement;
                        const quantitySelector = container.querySelector('.room-quantity');
                        if (quantitySelector) {
                            quantitySelector.disabled = false;
                        }
                    }

                    UpdateBookingSummaryWithRoomsAndServices();
                });
            });

            // Xử lý quantity selector
            document.querySelectorAll('.room-quantity').forEach(selector => {
                selector.addEventListener('change', function () {
                    // Nếu phòng đã được chọn, cập nhật số lượng
                    const container = this.closest('.room-item') || this.parentElement;
                    const button = container.querySelector('.select-room');
                    const roomNumbers = button.getAttribute('data-roomnumbers');

                    const existingRoomIndex = selectedRooms.findIndex(r => r.RoomNumbers === roomNumbers);
                    if (existingRoomIndex !== -1) {
                        const quantity = parseInt(this.value);
                        const roomNumberArray = roomNumbers.split(',').map(n => n.trim());
                        selectedRooms[existingRoomIndex].Quantity = quantity;
                        selectedRooms[existingRoomIndex].RoomNumber = roomNumberArray.slice(0, quantity).join(', ');
                        UpdateBookingSummaryWithRoomsAndServices();
                    }
                });
            });
            document.querySelectorAll('[data-service]').forEach(button => {
                button.addEventListener('click', function (e) {
                    e.preventDefault();
                    const serviceId = parseInt(this.getAttribute('data-service'));

                    const serviceIndex = selectedServices.indexOf(serviceId);
                    if (serviceIndex === -1) {
                        selectedServices.push(serviceId);
                        this.classList.add('btn-danger');
                        this.classList.remove('btn-primary');
                        this.textContent = 'Xóa'; 
                    } else {
                        selectedServices.splice(serviceIndex, 1);
                        this.classList.remove('btn-danger');
                        this.classList.add('btn-primary');
                        this.textContent = 'Thêm'; 
                    }

                    UpdateBookingSummaryWithRoomsAndServices();
                });
            });
        });

        function updateBookingSummary(checkIn, checkOut, adults, children) {
            currentBookingState = {
                checkIn: new Date(checkIn),
                checkOut: new Date(checkOut),
                adults: adults || 2,
                children: children || 0
            };

            const summarySection = document.getElementById('bookingSummary');
            if (summarySection) {
                summarySection.style.opacity = '0.5';
            }

            try {
                $.ajax({
                    url: '@Url.Action("UpdateBookingSummary", "Booking_64132675")',
                    type: 'POST',
                    data: JSON.stringify({
                        checkin: checkIn,
                        checkout: checkOut,
                        adults: adults || 2,
                        children: children || 0,
                        selectedRooms: selectedRooms,
                        selectedServices: selectedServices
                    }),
                    contentType: 'application/json',
                    success: function(result) {
                        $('#bookingSummary').html(result);
                    },
                    error: function(xhr, status, error) {
                        console.error('Error updating booking summary:', error);
                    },
                    complete: function() {
                        if (summarySection) {
                            summarySection.style.opacity = '1';
                        }
                    }
                });
            } catch (e) {
                console.error('Error in updateBookingSummary:', e);
                if (summarySection) {
                    summarySection.style.opacity = '1';
                }
            }
        }

        function UpdateBookingSummaryWithRoomsAndServices() {
            const summarySection = document.getElementById('bookingSummary');
            if (summarySection) {
                summarySection.style.opacity = '0.5';
            }

            $.ajax({
                url: '@Url.Action("UpdateBookingSummary", "Booking_64132675")',
                type: 'POST',
                data: JSON.stringify({
                    checkin: currentBookingState.checkIn.toISOString(),
                    checkout: currentBookingState.checkOut.toISOString(),
                    adults: currentBookingState.adults,
                    children: currentBookingState.children,
                    selectedRooms: selectedRooms,
                    selectedServices: selectedServices
                }),
                contentType: 'application/json',
                success: function (result) {
                    $('#bookingSummary').html(result);
                },
                error: function (xhr, status, error) {
                },
                complete: function () {
                    if (summarySection) {
                        summarySection.style.opacity = '1';
                    }
                }
            });
        }
    </script>
</body>
</html>